### YAML ANCHORS & TEMPLATES ###

.job-rules:
  - &job-rules-on-schedule
    if: '$CI_PIPELINE_SOURCE == "schedule"'
  - &job-rules-on-schedule-master-branch
    if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  - &job-rules-never-schedule
    if: '$CI_PIPELINE_SOURCE == "schedule"'
    when: never
  - &job-rules-always-pipeline-changes
    if: '$CI_COMMIT_BRANCH == "structure/pipeline"'
    when: always # even failed jobs won't prevent next jobs from being executed (OK in this case)
  - &job-rules-never-pipeline-changes
    if: '$CI_COMMIT_BRANCH == "structure/pipeline"'
    when: never
  - &job-rules-on-new-development-branch
    if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_SLUG =~ /develop-/ && $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"'
  - &job-rules-on-development-push
    if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_SLUG =~ /develop-/'
  - &job-rules-on-merge-request
    if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  - &job-rules-on-master-push
    if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# .deploy_template: &deploy_template
#   environment:
#     url: 'https://$DOMAIN'
#   before_script: &deploy_template_before_script
#     - echo $CI_RUNNER_ID
#     - cd $APP_ROOT
#     - echo $PWD
#     - 'echo using cache: $CI_PROJECT_ID'
#     - export SURGE_TGZ=$(ls $CACHE_ROOT/.npm-pack | grep -i surge.*tgz$ | sort | tail -n 1) && echo $SURGE_TGZ
#     - npm install -g --no-audit $CACHE_ROOT/.npm-pack/$SURGE_TGZ
#   script:
#     - 'echo Deploy URL: https://$DOMAIN'
#     # Environment Variables set as secrets from Gitlab CE web UI
#     # - echo SURGE_LOGIN $SURGE_LOGIN  # as defined by surge.sh
#     # - echo SURGE_TOKEN $SURGE_TOKEN  # as defined by surge.sh
#     # - echo PROD_DOMAIN $PROD_DOMAIN  # custom definition for Gitlab CE
#     # if using inside app (e.g. Node context) EnvVars should be prepended with K8S_SECRET_
#     - surge --project ./public --domain $DOMAIN

### STAGES

stages:
  - cache # for optimization and correctness of shared cache (e.g. up-to-date packages)
  - build
  - post-build
  - stg deploy
  - prod deploy
  - prod test

### GLOBAL CONFIGS ###

variables:
  APP_ROOT: $CI_PROJECT_DIR/ci/sample-app
  CACHE_ROOT: $CI_PROJECT_DIR/build-caches
  CACHE_FALLBACK_KEY: $CI_COMMIT_REF_SLUG---$CI_PROJECT_DIR
  STG_DOMAIN: ci-cd-app-stg.k8s-sample-gke.jchengdev.com
  PROD_DOMAIN: ci-cd-app.k8s-sample-gke.jchengdev.com

workflow: # pipeline activation
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    # these rules avoid pipeline duplication when working with merge requests

default:
  image: 'node:lts'
  tags:
    # - 'node' # ! unavailable in gitlab.com
    - 'gitlab-org'
  cache:
    - key: $CI_COMMIT_REF_SLUG---$CI_PROJECT_DIR # e.g. keep cache when re-building for 'master' branch, or the same commit
      policy: pull # avoid re-uploading untouched cache
      paths:
        - '$CACHE_ROOT/.npm'                                              # custom directory for npm cache (not the usual '~/.npm')
    - key: $CI_PROJECT_ID
      policy: pull
      paths:
        - '$CACHE_ROOT/.npm-pack'                                         # custom directory for npm i -g (local offline tarballs)
  before_script:
    - echo $CI_RUNNER_ID

### JOBS ###

update npm-g cache:
  stage: cache
  rules:
    - *job-rules-on-schedule-master-branch
  cache:
    key: $CI_PROJECT_ID
    policy: pull-push
    paths:
      - '$CACHE_ROOT/.npm-pack'
  before_script:
    - echo $CI_RUNNER_ID
    - echo $CI_BUILDS_DIR
    - echo $PWD                                                           # scripts starting location
    - echo $CI_API_V4_URL
    - rm -rf $CACHE_ROOT/.npm-pack/*
  script:
    - npm pack surge                                                      # also create "cache" for this dev dependency
    - mkdir -p $CACHE_ROOT/.npm-pack && mv *.tgz $CACHE_ROOT/.npm-pack && ls -la $CACHE_ROOT/.npm-pack
    - sleep 30

update npm cache:
  stage: cache
  rules:
    - *job-rules-on-schedule
    - *job-rules-always-pipeline-changes
    - *job-rules-on-new-development-branch
  cache:
    key: $CI_COMMIT_REF_SLUG---$CI_PROJECT_DIR
    policy: pull-push
    paths:
      - '$CACHE_ROOT/.npm'
  before_script:
    - echo $CI_RUNNER_ID
    - echo $CI_BUILDS_DIR
    - echo $PWD                                                           # scripts starting location
    - echo $CI_API_V4_URL
    - $CI_KUBERNETES_ACTIVE && echo "true" || echo "false"
    - $CI_COMMIT_REF_PROTECTED && echo "true" || echo "false"             # protected Secrets don't get loaded in detached mode (Merge Request pipelines)
    - npm cache clean --force
  script:
    - cd $APP_ROOT                                                        # package.json location for 'npm ci' command
    - echo $PWD
    - npm ci --cache $CACHE_ROOT/.npm                                     # strict match to package-lock.json and use custom directory for npm cache
    - npm outdated || true                                                # check current versions against renewed cache
    - sleep 30

build dev image:
  stage: build
  rules:
    - *job-rules-never-schedule
    - *job-rules-always-pipeline-changes
    - *job-rules-on-development-push
    - *job-rules-on-merge-request
  tags:
    - 'gitlab-org-docker'
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: 'docker:19.03.12'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - docker info                                                         # check DinD
    - echo "$GITLAB_REGISTRY_PASS" | docker login registry.gitlab.com --username $GITLAB_REGISTRY_USER --password-stdin
  script:
    - echo $CI_COMMIT_BEFORE_SHA                                          # value is '0000000000000000000000000000000000000000' if new branch or detached MR pipelines
    - echo $CI_COMMIT_SHORT_SHA
    - export IMG_TAG=${CI_REGISTRY_IMAGE}:dev
    - cd $APP_ROOT
    - echo $PWD
    - docker build -t ci-cd-app:latest --target=prod --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" --build-arg SOURCE_COMMIT=$CI_COMMIT_SHORT_SHA -f ./Dockerfile .
    - docker tag ci-cd-app:latest $IMG_TAG
    - docker push $IMG_TAG
    - docker logout $CI_REGISTRY

build prod image:
  stage: build
  rules:
    - *job-rules-never-schedule
    - *job-rules-on-master-push
  tags:
    - 'gitlab-org-docker'
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: 'docker:19.03.12'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - docker info
    # - echo "$DOCKER_REGISTRY_PASS" | docker login $DOCKER_REGISTRY --username $DOCKER_REGISTRY_USER --password-stdin
    - echo "$DOCKER_REGISTRY_PASS" | docker login --username $DOCKER_REGISTRY_USER --password-stdin
  script:
    - echo $CI_COMMIT_BEFORE_SHA
    - echo $CI_COMMIT_SHORT_SHA
    - cd $APP_ROOT
    - echo $PWD
    - docker build -t ci-cd-app:latest --target=prod --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" --build-arg SOURCE_COMMIT=$CI_COMMIT_SHORT_SHA -f ./Dockerfile .
    - docker tag ci-cd-app:latest jchengdeveng/k8s-sample-gke-ci-cd-app:latest
    - docker push jchengdeveng/k8s-sample-gke-ci-cd-app:latest
    - docker tag ci-cd-app:latest jchengdeveng/k8s-sample-gke-ci-cd-app:$CI_COMMIT_SHA
    - docker push jchengdeveng/k8s-sample-gke-ci-cd-app:$CI_COMMIT_SHA

check dev image:
  stage: post-build
  rules:
    - *job-rules-never-schedule
    - *job-rules-always-pipeline-changes
    - *job-rules-on-development-push
    - *job-rules-on-merge-request
  tags:
    - 'gitlab-org-docker'
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: 'docker:19.03.12'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - docker info
    - echo "$GITLAB_REGISTRY_PASS" | docker login registry.gitlab.com --username $GITLAB_REGISTRY_USER --password-stdin
  script:
    - echo $CI_COMMIT_BEFORE_SHA
    - echo $CI_COMMIT_SHORT_SHA
    - export IMG_TAG=${CI_REGISTRY_IMAGE}:dev
    - cd $APP_ROOT
    - echo $PWD
    - docker run --rm -d -p 65080:80 --name ci-cd-app $IMG_TAG
    - '[[ $(docker inspect --format ''{{ index .Config.Labels "org.opencontainers.image.revision"}}'' ci-cd-app) == $CI_COMMIT_SHORT_SHA ]] && echo "true"'
    - docker logout $CI_REGISTRY

check prod image:
  stage: post-build
  rules:
    - *job-rules-never-schedule
    - *job-rules-on-master-push
  tags:
    - 'gitlab-org-docker'
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: 'docker:19.03.12'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - docker info
  script:
    - echo $CI_COMMIT_BEFORE_SHA
    - echo $CI_COMMIT_SHORT_SHA
    - cd $APP_ROOT
    - echo $PWD
    - docker run --rm -d -p 65080:80 --name ci-cd-app jchengdeveng/k8s-sample-gke-ci-cd-app:latest
    - '[[ $(docker inspect --format ''{{ index .Config.Labels "org.opencontainers.image.revision"}}'' ci-cd-app) == $CI_COMMIT_SHORT_SHA ]] && echo "true"'

deploy to staging:
  stage: stg deploy
  rules:
    - *job-rules-never-schedule
    - *job-rules-always-pipeline-changes
    - *job-rules-on-master-push
  environment:
    name: staging
    url: 'http://$STG_DOMAIN'
  image: 'google/cloud-sdk:alpine'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - gcloud components update kubectl
  script:
    - 'echo Deploy URL: http://$STG_DOMAIN'
    - mkdir -p ~/.kube
    - echo $KUBE_CONFIG > ~/.kube/config
    - cat ~/.kube/config
    - kubectl cluster-info
    # - kubectl set image

deploy to production:
  stage: prod deploy
  variables:
    DOMAIN: $PROD_DOMAIN
  rules:
    - *job-rules-never-schedule
    - <<: *job-rules-on-master-push
      when: manual
      allow_failure: false # required for the manual approval step
  environment:
    name: production
    url: 'http://$PROD_DOMAIN'
  image: 'alpine:latest'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
  script:
    - 'echo Deploy URL: http://$PROD_DOMAIN'
    # TODO

production test:
  stage: prod test
  rules:
    - *job-rules-never-schedule
    - *job-rules-on-master-push
  image: 'alpine:latest'
  cache: {}
  before_script:
    - echo $CI_RUNNER_ID
    - apk update && apk add curl
  script:
    - curl "http://$PROD_DOMAIN" | tac | tac | grep -q "GitHub"
    - curl "http://$PROD_DOMAIN" | tac | tac | grep -q "$CI_COMMIT_SHORT_SHA"

