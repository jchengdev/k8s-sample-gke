import { Component } from 'react';
import type { WithStyles } from '@mui/styles';
import { withStyles } from '@mui/styles';

import CssBaseline from '@mui/material/CssBaseline';
import { Global } from '@emotion/react';

import { ROOT } from '@/routes/helpers';

import Navbar from '@/common/components/Navbar';
import ColorBox from '@/common/components/ColorBox';
import PaletteFooter from '@/common/components/PaletteFooter';
import {
  levels,
  LevelT,
  FormatT,
  PaletteMapProps,
} from '@/common/utils/color-helpers';

import styles from './Palette.styles';

interface PaletteProps extends PaletteMapProps {
  format: FormatT;
  changeFormat: (newFormat: FormatT) => void;
}
interface ComposedProps extends PaletteProps, WithStyles<typeof styles> {}

interface PaletteState {
  level: LevelT;
}

class Palette extends Component<ComposedProps, PaletteState> {
  constructor(props: ComposedProps) {
    super(props);
    this.state = {
      level: 500,
    };
    this._changeLevel = this._changeLevel.bind(this);
  }

  _changeLevel(newLevel: number | number[]) {
    if (levels.includes(newLevel as LevelT))
      this.setState({ level: newLevel as LevelT });
  }

  override render() {
    const {
      classes: styleClasses,
      paletteName,
      id: paletteId,
      emoji,
      colors,
      format,
      changeFormat,
    } = this.props;
    const { level } = this.state;

    const colorBoxes = colors[level].map(c => (
      <ColorBox
        key={c.id}
        name={c.name}
        background={c[format]}
        moreUrl={ROOT.SINGLECOLORPALETTE(paletteId, c.id)}
        showingFullPalette
      />
    ));

    return (
      <>
        <CssBaseline />
        <Global
          styles={{
            'body div': {
              lineHeight: '0', // overrides default line-height: 1.5 generated by <CssBaseline />
            },
          }}
        />
        <Navbar
          level={level}
          minLevel={levels[1]}
          maxLevel={levels[levels.length - 1] as number}
          sliderStep={levels[2] - levels[1]}
          onChangeLevel={this._changeLevel}
          showingAllColors
          format={format}
          onChangeFormat={changeFormat}
        />
        <div className={styleClasses.root}>
          <div className={styleClasses.colors}>{colorBoxes}</div>
          <PaletteFooter paletteName={paletteName} emoji={emoji} />
        </div>
      </>
    );
  }
}

export default withStyles(styles)(Palette);
