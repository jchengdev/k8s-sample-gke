import type { DocumentContext, DocumentInitialProps } from 'next/document';
import Document, { Html, Head, Main, NextScript } from 'next/document';

import {
  createServerInstance,
  emotionWrapper,
} from '@/common/ssr/emotion/server';
import {
  generateEmotionStyles,
  injectEmotionStyles,
} from '@/common/ssr/emotion/headStyles';
import { EMOTION_INSERTION_POINT } from '@/common/ssr/emotion/_constants';

import { COMMIT_SHA } from '@/common/_dev_notes';

interface ExtendedDocumentInitialProps extends DocumentInitialProps {
  emotionStyleTags: React.ReactNode[];
}

class MyDocument extends Document {
  /**
   * ! DON'T CHANGE `renderPage` or `getInitialProps` unless you're really sure what you're doing
   * * https://nextjs.org/docs/advanced-features/custom-document#customizing-renderpage
   */
  static override async getInitialProps(
    ctx: DocumentContext
  ): Promise<ExtendedDocumentInitialProps> {
    // Resolution order
    //
    // On the server:
    // 1. app.getInitialProps
    // 2. page.getInitialProps
    // 3. document.getInitialProps
    // 4. app.render
    // 5. page.render
    // 6. document.render
    //
    // On the server with error:
    // 1. document.getInitialProps
    // 2. app.render
    // 3. page.render
    // 4. document.render
    //
    // On the client
    // 1. app.getInitialProps
    // 2. page.getInitialProps
    // 3. app.render
    // 4. page.render
    console.log(
      `_document.js getInitialProps(ctx) called: ${JSON.stringify(
        Object.assign({}, ctx, { req: null, res: null })
      )}`
    );

    const originalRenderPage = ctx.renderPage;

    // You can consider sharing the same Emotion cache between all the SSR requests to speed up performance.
    // However, be aware that it can have global side effects.
    const { serverSideEmotionCache, extractCriticalToChunks } =
      createServerInstance();

    // Run the React rendering logic synchronously
    ctx.renderPage = () =>
      originalRenderPage({
        // Useful for wrapping the whole react tree
        enhanceApp: MyApp => emotionWrapper(MyApp, serverSideEmotionCache),
        // Useful for wrapping in a per-page basis
        enhanceComponent: Component => Component,
      });

    // Run the parent `getInitialProps`, it now includes the custom `renderPage`
    const initialProps = await Document.getInitialProps(ctx);

    return {
      ...initialProps,
      emotionStyleTags: generateEmotionStyles(
        initialProps.html,
        extractCriticalToChunks
      ),
    };
  }

  override render() {
    return (
      <Html>
        <Head>
          <meta name="description" content="Generated by create next app" />
          <meta name="gitlab-tac-tac-string" content={`__${COMMIT_SHA}__`} />
          <link rel="icon" href="/favicon.ico" />
          <meta name={EMOTION_INSERTION_POINT} content="" />
          {injectEmotionStyles(
            (this.props as unknown as ExtendedDocumentInitialProps)
              .emotionStyleTags
          )}
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;
